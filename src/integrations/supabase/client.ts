
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Replace these with your own Supabase project credentials
// You can find these in your Supabase project settings > API
const SUPABASE_URL = "https://otgsngjfsmwacekmqmpf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im90Z3NuZ2pmc213YWNla21xbXBmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwMzU3MDgsImV4cCI6MjA1NzYxMTcwOH0.A9UB5J5u8umXAzATEdhnqeaVux3VRxTE9X3Euort-uE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'implicit'
  }
});

// Helper functions for admin operations
export const adminOperations = {
  // NGO management
  async verifyNGO(ngoId: string) {
    try {
      const { data, error } = await supabase
        .from('profiles')
        .update({ verification_status: 'approved' })
        .eq('id', ngoId)
        .eq('role', 'ngo_admin');
      
      if (error) throw error;
      
      return { data, error: null };
    } catch (error) {
      console.error("Error verifying NGO:", error);
      return { data: null, error };
    }
  },
  
  async rejectNGO(ngoId: string) {
    try {
      const { data, error } = await supabase
        .from('profiles')
        .update({ verification_status: 'rejected' })
        .eq('id', ngoId)
        .eq('role', 'ngo_admin');
      
      if (error) throw error;
      
      return { data, error: null };
    } catch (error) {
      console.error("Error rejecting NGO:", error);
      return { data: null, error };
    }
  },
  
  // Get all users by role - using custom RPC function since we can't directly query auth.users
  async getUsersByRole(role: string) {
    try {
      // Get all profiles and filter by role
      const { data: profiles, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('role', role);
      
      if (error) throw error;
      
      return { data: profiles || [], error: null };
    } catch (error) {
      console.error("Error getting users by role:", error);
      return { data: [], error };
    }
  },
  
  // Get all NGOs (pending and verified)
  async getAllNGOs() {
    try {
      // Get all profiles with ngo_admin role
      const { data: profiles, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('role', 'ngo_admin');
      
      if (error) return { pendingNGOs: [], verifiedNGOs: [], error };
      
      const pendingNGOs = profiles
        ?.filter(ngo => ngo.verification_status !== 'approved')
        .map(ngo => ({
          id: ngo.id,
          name: ngo.organization || ngo.name || 'Unnamed NGO',
          category: 'Uncategorized',
          description: '',
          location: '',
          logo: "/placeholder.svg",
          registrationDate: new Date(ngo.created_at || '').toISOString().split('T')[0],
          email: ngo.email,
          phone: '',
          documents: [],
          verified: false
        })) || [];
      
      const verifiedNGOs = profiles
        ?.filter(ngo => ngo.verification_status === 'approved')
        .map(ngo => ({
          id: ngo.id,
          name: ngo.organization || ngo.name || 'Unnamed NGO',
          category: 'Uncategorized',
          description: '',
          location: '',
          logo: "/placeholder.svg",
          verified: true
        })) || [];
      
      return { pendingNGOs, verifiedNGOs, error: null };
    } catch (error) {
      console.error("Error getting all NGOs:", error);
      return { pendingNGOs: [], verifiedNGOs: [], error };
    }
  },
  
  // Get all users
  async getAllUsers() {
    try {
      const { data: profiles, error } = await supabase
        .from('profiles')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (error) return { data: [], error };
      
      const formattedUsers = profiles?.map(user => ({
        id: user.id,
        name: user.name || user.organization || 'Unknown User',
        email: user.email,
        role: user.role || 'donor',
        joinDate: new Date(user.created_at || '').toISOString().split('T')[0],
        ngoName: user.organization,
        status: 'active',
        donations: 0 // This would need to be populated from a donations table
      })) || [];
      
      return { data: formattedUsers, error: null };
    } catch (error) {
      console.error("Error getting all users:", error);
      return { data: [], error };
    }
  }
};
