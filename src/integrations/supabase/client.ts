
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Replace these with your own Supabase project credentials
// You can find these in your Supabase project settings > API
const SUPABASE_URL = "https://otgsngjfsmwacekmqmpf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im90Z3NuZ2pmc213YWNla21xbXBmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwMzU3MDgsImV4cCI6MjA1NzYxMTcwOH0.A9UB5J5u8umXAzATEdhnqeaVux3VRxTE9X3Euort-uE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'implicit'
  }
});

// Helper functions for admin operations
export const adminOperations = {
  // NGO management
  async verifyNGO(ngoId: string) {
    try {
      const { data, error } = await supabase.auth.admin.updateUserById(ngoId, {
        user_metadata: { verification_status: 'approved' }
      });
      
      if (error) throw error;
      
      return { data, error: null };
    } catch (error) {
      console.error("Error verifying NGO:", error);
      return { data: null, error };
    }
  },
  
  async rejectNGO(ngoId: string) {
    try {
      const { data, error } = await supabase.auth.admin.updateUserById(ngoId, {
        user_metadata: { verification_status: 'rejected' }
      });
      
      if (error) throw error;
      
      return { data, error: null };
    } catch (error) {
      console.error("Error rejecting NGO:", error);
      return { data: null, error };
    }
  },
  
  // Get all users by role - using custom RPC function since we can't directly query auth.users
  async getUsersByRole(role: string) {
    try {
      // For now, we'll simulate this by getting all users and filtering client-side
      const { data: users, error } = await supabase.auth.admin.listUsers();
      
      if (error) throw error;
      
      const filteredUsers = users?.users.filter(user => 
        user.user_metadata?.user_role === role
      ) || [];
      
      return { data: filteredUsers, error: null };
    } catch (error) {
      console.error("Error getting users by role:", error);
      return { data: [], error };
    }
  },
  
  // Get all NGOs (pending and verified)
  async getAllNGOs() {
    try {
      const { data: users, error } = await supabase.auth.admin.listUsers();
      
      if (error) return { pendingNGOs: [], verifiedNGOs: [], error };
      
      const ngos = users?.users.filter(user => 
        user.user_metadata?.user_role === 'ngo_admin'
      ) || [];
      
      const pendingNGOs = ngos
        .filter(ngo => ngo.user_metadata?.verification_status !== 'approved')
        .map(ngo => ({
          id: ngo.id,
          name: ngo.user_metadata?.organization_name || 'Unnamed NGO',
          category: ngo.user_metadata?.ngo_type || 'Uncategorized',
          description: ngo.user_metadata?.description || 'No description provided',
          location: ngo.user_metadata?.location || 'Unknown location',
          logo: "/placeholder.svg",
          registrationDate: new Date(ngo.created_at).toISOString().split('T')[0],
          email: ngo.email,
          phone: ngo.user_metadata?.phone || 'No phone provided',
          documents: [],
          verified: false
        }));
      
      const verifiedNGOs = ngos
        .filter(ngo => ngo.user_metadata?.verification_status === 'approved')
        .map(ngo => ({
          id: ngo.id,
          name: ngo.user_metadata?.organization_name || 'Unnamed NGO',
          category: ngo.user_metadata?.ngo_type || 'Uncategorized',
          description: ngo.user_metadata?.description || 'No description provided',
          location: ngo.user_metadata?.location || 'Unknown location',
          logo: "/placeholder.svg",
          verified: true
        }));
      
      return { pendingNGOs, verifiedNGOs, error: null };
    } catch (error) {
      console.error("Error getting all NGOs:", error);
      return { pendingNGOs: [], verifiedNGOs: [], error };
    }
  },
  
  // Get all users
  async getAllUsers() {
    try {
      const { data: users, error } = await supabase.auth.admin.listUsers();
      
      if (error) return { data: [], error };
      
      const formattedUsers = users?.users.map(user => ({
        id: user.id,
        name: user.user_metadata?.full_name || user.user_metadata?.organization_name || 'Unknown User',
        email: user.email,
        role: user.user_metadata?.user_role || 'donor',
        joinDate: new Date(user.created_at).toISOString().split('T')[0],
        ngoName: user.user_metadata?.organization_name,
        status: user.banned ? 'banned' : 'active',
        donations: 0 // This would need to be populated from a donations table
      })) || [];
      
      return { data: formattedUsers, error: null };
    } catch (error) {
      console.error("Error getting all users:", error);
      return { data: [], error };
    }
  }
};
